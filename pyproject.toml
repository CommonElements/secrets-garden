[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "secrets-garden"
version = "0.1.0"
description = "A secure, local-first secrets management CLI tool with military-grade encryption"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Harry Schoeller", email = "harry@example.com"},
]
keywords = [
    "secrets",
    "cli",
    "security",
    "encryption", 
    "password-manager",
    "local-first"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Security :: Cryptography",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
dependencies = [
    "typer[all]>=0.12.0,<1.0.0",
    "cryptography>=42.0.0,<43.0.0",
    "sqlite-utils>=3.36.0,<4.0.0",
    "rich>=13.7.0,<14.0.0",
    "keyring>=24.3.0,<25.0.0",
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.0.0,<3.0.0",
    "click>=8.1.0,<9.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "pytest-xdist>=3.5.0,<4.0.0",
    "black>=23.12.0,<24.0.0",
    "ruff>=0.1.0,<1.0.0",
    "mypy>=1.8.0,<2.0.0",
    "pre-commit>=3.6.0,<4.0.0",
    "coverage[toml]>=7.3.0,<8.0.0",
]
docs = [
    "mkdocs>=1.5.0,<2.0.0",
    "mkdocs-material>=9.5.0,<10.0.0",
    "mkdocs-click>=0.8.0,<1.0.0",
    "mkdocstrings[python]>=0.24.0,<1.0.0",
]

[project.scripts]
secrets-garden = "secrets_garden.cli.main:app"

[project.urls]
Homepage = "https://github.com/harryschoeller/secrets-garden"
Documentation = "https://github.com/harryschoeller/secrets-garden#readme"
Repository = "https://github.com/harryschoeller/secrets-garden"
"Bug Tracker" = "https://github.com/harryschoeller/secrets-garden/issues"

[tool.hatch.build.targets.wheel]
packages = ["secrets_garden"]

[tool.hatch.version]
path = "secrets_garden/__init__.py"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "S",   # bandit security checks
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected (pytest uses assert)
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["S101", "ARG001", "ARG002"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=secrets_garden",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "security: marks tests as security-focused tests",
]

[tool.coverage.run]
source = ["secrets_garden"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]